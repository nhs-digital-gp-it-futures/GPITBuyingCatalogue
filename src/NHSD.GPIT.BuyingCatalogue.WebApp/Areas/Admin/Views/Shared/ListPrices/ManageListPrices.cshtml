@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Catalogue.Models
@using NHSD.GPIT.BuyingCatalogue.UI.Components.TagHelpers
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.Components.ActionLink
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.Components.NhsSecondaryButton
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.SummaryList
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.Table
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.Tags
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Admin.Models.ListPriceModels
@model ManageListPricesModel

@{
    ViewBag.Title = "List price";
}

<partial name="Partials/_BackLink" model="Model" />
<div class="nhsuk-grid-row">
    <div class="nhsuk-grid-column-two-thirds">
        <nhs-page-title title="@ViewBag.Title"
                        caption="@Model.CatalogueItemName"
                        advice="Provide details of how much your @(Model.CatalogueItemType.Name()) costs. You must add at least one price type." />


        <vc:nhs-action-link text="Add a list price" url="@Model.AddListPriceUrl" />

        <p>Use the link to add information on each pricing type for your @(Model.CatalogueItemType.Name()).</p>

        @if(Model.TieredPrices.Any())
        {
            <div data-test-id="tiered-prices">
                @foreach(var price in Model.TieredPrices)
                {
                    <div data-test-id="tiered-price-@price.CataloguePriceId">
                        <h2>@GetHeadingTitle(price)</h2>

                        <div>
                            <b>Status: </b>
                            <nhs-tag status-enum="@price.PublishedStatus"/>
                        </div>
                        <br />
                        <div data-test-id="edit-price-@price.CataloguePriceId">
                            <vc:nhs-action-link text="Edit price" url="@GetEditPriceUrl(price)" />
                        </div>

                        <nhs-table label-text="Pricing tiers">
                            <nhs-table-column>Tier</nhs-table-column>
                            <nhs-table-column>Price</nhs-table-column>
                            <nhs-table-column>Range</nhs-table-column>

                            @for(var i = 0; i < price.CataloguePriceTiers.Count; i++)
                            {
                                var priceTier = price.CataloguePriceTiers.OrderBy(p => p.LowerRange).ElementAt(i);
                                <nhs-table-row-container>
                                    <nhs-table-cell>@GetTierName(i)</nhs-table-cell>
                                    <nhs-table-cell>£@priceTier.Price</nhs-table-cell>
                                    <nhs-table-cell>@priceTier.GetRangeDescription()</nhs-table-cell>
                                </nhs-table-row-container>
                            }
                        </nhs-table>
                    </div>
                }
            </div>
        }

        @if(Model.FlatPrices.Any())
        {
            <div data-test-id="flat-prices">
                @foreach(var price in Model.FlatPrices)
                {
                    <div data-test-id="flat-price-@price.CataloguePriceId">
                        <h2>@GetHeadingTitle(price)</h2>

                        <div>
                            <b>Status: </b>
                            <nhs-tag status-enum="@price.PublishedStatus"/>
                        </div>
                        <br />
                        <div data-test-id="edit-price-@price.CataloguePriceId">
                            <vc:nhs-action-link text="Edit price" url="@GetEditPriceUrl(price)" />
                        </div>

                        <nhs-summary-list>
                            @foreach(var priceFlat in price.CataloguePriceTiers)
                            {
                                <nhs-summary-list-row label-text="Provisioning type">@price.ProvisioningType.Name()</nhs-summary-list-row>
                                @if(price.TimeUnit is not null)
                                {
                                    <nhs-summary-list-row label-text="Time unit">@GetTimeUnit(price)</nhs-summary-list-row>
                                }
                                <nhs-summary-list-row label-text="Price">£@priceFlat.Price</nhs-summary-list-row>
                            }
                        </nhs-summary-list>
                    </div>
                }
            </div>
        }

        <vc:nhs-secondary-button text="Continue"
                                    use-primary-colour="true"
                                    url="@Model.BackLink" />
    </div>
</div>

@{
    static string GetTierName(int index) => $"Tier {index + 1}";

    static string GetHeadingTitle(CataloguePrice cataloguePrice) => $"{Enum.GetName(cataloguePrice.CataloguePriceType)} price - {cataloguePrice.PricingUnit.Description}";

    static string GetTimeUnit(CataloguePrice price) => price.TimeUnit!.Value.Description() ?? "None";

    string GetEditPriceUrl(CataloguePrice cataloguePrice) => cataloguePrice.CataloguePriceType switch {
        CataloguePriceType.Flat => GetEditFlatPriceUrl(cataloguePrice),
        CataloguePriceType.Tiered => GetEditTieredPriceUrl(cataloguePrice),
        };

    string GetEditTieredPriceUrl(CataloguePrice cataloguePrice) => Model.CatalogueItemType switch {
        CatalogueItemType.Solution => Url.Action(
            nameof(CatalogueSolutionListPriceController.EditTieredListPrice),
            typeof(CatalogueSolutionListPriceController).ControllerName(),
            new { solutionId = Model.CatalogueItemId, cataloguePrice.CataloguePriceId }),
        CatalogueItemType.AdditionalService => Url.Action(
            nameof(AdditionalServiceListPriceController.EditTieredListPrice),
            typeof(AdditionalServiceListPriceController).ControllerName(),
            new { solutionId = Model.CatalogueItemId, AdditionalServiceId = Model.ServiceId, cataloguePrice.CataloguePriceId }),
        };

    string GetEditFlatPriceUrl(CataloguePrice cataloguePrice) => Model.CatalogueItemType switch {
        CatalogueItemType.Solution => Url.Action(
            nameof(CatalogueSolutionListPriceController.EditFlatListPrice),
            typeof(CatalogueSolutionListPriceController).ControllerName(),
            new { solutionId = Model.CatalogueItemId, cataloguePrice.CataloguePriceId }),
        CatalogueItemType.AdditionalService => Url.Action(
            nameof(AdditionalServiceListPriceController.EditFlatListPrice),
            typeof(AdditionalServiceListPriceController).ControllerName(),
            new { solutionId = Model.CatalogueItemId, AdditionalServiceId = Model.ServiceId, cataloguePrice.CataloguePriceId }),
        };
}
