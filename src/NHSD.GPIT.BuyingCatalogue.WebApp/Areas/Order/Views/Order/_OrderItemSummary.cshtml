@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Catalogue.Models
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Extensions
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Ordering.Models
@model OrderItem
@{
    var startDate = Model.Order.CommencementDate!.Value;
    var endDate = Model.Order.CommencementDate!.Value.AddMonths(Model.Order.MaximumTerm!.Value);
    var totalDays = endDate.Subtract(startDate).TotalDays;

    var fundingType = Model.CurrentFundingType();
    var totalCost = Model. CalculateTotalCost();

    var startDateFormatted = @startDate.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture);
    var endDateFormatted = @endDate.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture);
}
@if (Model.OrderItemRecipients.Any())
{
    <br/>
    <nhs-table label-text="Service Recipients" catches-errors="false">
        <nhs-table-column>Recipient</nhs-table-column>
        <nhs-table-column>ODS code</nhs-table-column>
        <nhs-table-column>Item ID</nhs-table-column>
        <nhs-table-column>Service instance ID</nhs-table-column>
        <nhs-table-column>Quantity per practice</nhs-table-column>
                        
        @for (int i = 0; i < Model.OrderItemRecipients.Count; i++)
        {
            var serviceRecipient = Model.OrderItemRecipients.ElementAt(i);
            <nhs-table-row-container>
                <nhs-table-cell>@serviceRecipient.Recipient.Name</nhs-table-cell>
                <nhs-table-cell>@serviceRecipient.Recipient.OdsCode</nhs-table-cell>
                <nhs-table-cell>@($"{Model.Order.CallOffId}-{serviceRecipient.Recipient.OdsCode}-{i + 1}")</nhs-table-cell>
                <nhs-table-cell>@Model.Order.ServiceInstanceItems.First(p => p.OdsCode == serviceRecipient.Recipient.OdsCode).ServiceInstanceId</nhs-table-cell>
                <nhs-table-cell>@(serviceRecipient.Quantity?.ToString() ?? "Not specified")</nhs-table-cell>
            </nhs-table-row-container>
        }
    </nhs-table>
}

@if (Model.OrderItemPrice is not null && Model.OrderItemPrice.OrderItemPriceTiers.Any())
{
    <br />
    <nhs-table label-text="Pricing" catches-errors="false">
        @if (Model.OrderItemPrice.CataloguePriceType == CataloguePriceType.Flat)
        {
            <nhs-table-column>Price per unit</nhs-table-column>
            <nhs-table-column>Quantity</nhs-table-column>
            <nhs-table-column>Total price (@($"{Model.OrderItemPrice.CostType.Description().ToLowerInvariant()} cost"))</nhs-table-column>

            var price = Model.OrderItemPrice.OrderItemPriceTiers.First();
            <nhs-table-row-container>
                <nhs-table-cell>£@price.Price.ToString("N2") @Model.OrderItemPrice.Description</nhs-table-cell>
                <nhs-table-cell>@Model.GetTotalRecipientQuantity()</nhs-table-cell>
                <nhs-table-cell>£@totalCost.ToString("N4")</nhs-table-cell>
            </nhs-table-row-container>
        } else
        {
            <nhs-table-column>Pricing tier</nhs-table-column>
            <nhs-table-column>Price per unit</nhs-table-column>
            <nhs-table-column>Quantity</nhs-table-column>
            <nhs-table-column>Total tier price (@($"{Model.OrderItemPrice.CostType.Description().ToLowerInvariant()} cost"))</nhs-table-column>

            @foreach(var (tierQuantity, index) in GetQuantityPerTier().OrderBy(p => p.Key.LowerRange).Select((p, i) => (p, i)))
            {
                <nhs-table-row-container>
                    <nhs-table-cell>Tier @(index+1)</nhs-table-cell>
                    <nhs-table-cell>£@tierQuantity.Key.Price.ToString("N2") @Model.OrderItemPrice.Description</nhs-table-cell>
                    <nhs-table-cell>@tierQuantity.Value</nhs-table-cell>
                    <nhs-table-cell>£@((tierQuantity.Value * tierQuantity.Key.Price).ToString("N4"))</nhs-table-cell>
                </nhs-table-row-container>
            }
        }
    </nhs-table>
}

@if(fundingType != OrderItemFundingType.None) {
    <br />
    <nhs-table label-text="Funding source" catches-errors="false">
        <nhs-table-column>Funding type</nhs-table-column>
        <nhs-table-column>Allocation</nhs-table-column>
        <nhs-table-column>Start date</nhs-table-column>
        <nhs-table-column>End date</nhs-table-column>
        
        @if (fundingType == OrderItemFundingType.MixedFunding && Model.CalculateCostPerYear() > 0)
        {
            var centralEndDate = GetAllocationEndDate();
            var localStartDate = centralEndDate.AddDays(1);

            var centralEndDateFormatted = centralEndDate.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture);
            var localStartDateFormatted = localStartDate.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.InvariantCulture);
            <nhs-table-row-container>
                <nhs-table-cell>@GetFundingName(OrderItemFundingType.CentralFunding)</nhs-table-cell>
                <nhs-table-cell>£@Model.OrderItemFunding.CentralAllocation.ToString("N2")</nhs-table-cell>
                <nhs-table-cell>@startDateFormatted</nhs-table-cell>
                <nhs-table-cell>@centralEndDateFormatted</nhs-table-cell>
            </nhs-table-row-container>
            <nhs-table-row-container>
                <nhs-table-cell>@GetFundingName(OrderItemFundingType.LocalFunding)</nhs-table-cell>
                <nhs-table-cell>£@Model.OrderItemFunding.LocalAllocation.ToString("N2")</nhs-table-cell>
                <nhs-table-cell>@localStartDateFormatted</nhs-table-cell>
                <nhs-table-cell>@endDateFormatted</nhs-table-cell>
            </nhs-table-row-container>
        } else {
            <nhs-table-row-container>
                <nhs-table-cell>@GetFundingName(fundingType)</nhs-table-cell>
                <nhs-table-cell>£@GetAllocation().ToString("N2")</nhs-table-cell>
                <nhs-table-cell>@startDateFormatted</nhs-table-cell>
                <nhs-table-cell>@endDateFormatted</nhs-table-cell>
            </nhs-table-row-container>
        }
    </nhs-table>
}

@{
    decimal GetAllocation()
    {
        var fundingType = Model.CurrentFundingType();

        return fundingType switch
        {
            OrderItemFundingType.CentralFunding => Model.OrderItemFunding.CentralAllocation,
            OrderItemFundingType.LocalFunding => Model.OrderItemFunding.LocalAllocation,
            _ => throw new InvalidOperationException(),
        };
    }

    string GetFundingName(OrderItemFundingType fundingType)
    => fundingType switch
    {
        OrderItemFundingType.CentralFunding => "Central",
        OrderItemFundingType.LocalFunding => "Local",
        OrderItemFundingType.MixedFunding or _ => "Mixed",
    };

    Dictionary<OrderItemPriceTier, int> GetQuantityPerTier()
    {
        var totalQuantity = Model.GetTotalRecipientQuantity();
        var tiers = Model.OrderItemPrice.OrderItemPriceTiers.OrderBy(p => p.LowerRange);
        var tierQuantity = new Dictionary<OrderItemPriceTier, int>();

        int lastUpperRange = 0;
        foreach(var tier in tiers)
        {
            if (totalQuantity is 0)
            { 
                tierQuantity[tier] = 0;
                continue;
            }

            int range;
            if (!tier.UpperRange.HasValue)
            {
                range = totalQuantity;
            }
            else
            {
                range = tier.UpperRange.Value;
                range -= lastUpperRange;
                lastUpperRange = tier.UpperRange.Value;

                if (range > totalQuantity)
                    range = totalQuantity;
            }

            tierQuantity[tier] = range;
            totalQuantity -= range;
        }

        return tierQuantity;
    }

    DateTime GetAllocationEndDate()
    {
        var centralAllocation = Model.OrderItemFunding.CentralAllocation;

        var percentage = (double)Math.Round(centralAllocation / totalCost, 2);
        var estimateDays = percentage * totalDays;

        return startDate.AddDays(estimateDays);
    }
}
