@using NHSD.GPIT.BuyingCatalogue.ServiceContracts.Enums
@using NHSD.GPIT.BuyingCatalogue.ServiceContracts.Routing
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Controllers.Contracts
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Controllers.SolutionSelection
@model NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Models.SolutionSelection.TaskList.TaskListOrderItemModel;
@{
    const RoutingSource source = RoutingSource.TaskList;
    var progress = 0;
    if (Model.PriceStatus is not (TaskProgress.NotStarted or TaskProgress.CannotStart))
    {
        progress++;
    }
    if (Model.QuantityStatus is not (TaskProgress.NotStarted or TaskProgress.CannotStart))
    {
        progress++;
    }

    var marginBottom = (Model.CanBeRemoved ? "16px" : "48px");
}

<div style="display:block; align-items:center;">
    <h3 class="header-with-detail">
        @Model.Name  
    </h3>
    @if(!Model.IsAmendment)
    {
        <span class="detail">
            <strong>@progress</strong> of <strong>2</strong> started
        </span>
    }
</div>

<nhs-table style="margin-bottom:@marginBottom">
    <nhs-table-column>Section</nhs-table-column>
    <nhs-table-column>Status</nhs-table-column>
    <nhs-table-column><span class="nhsuk-u-visually-hidden">Action</span></nhs-table-column>

    <nhs-table-row-container>
        <nhs-table-cell>Price</nhs-table-cell>
        <nhs-table-cell>
            <nhs-tag status-enum="@Model.PriceStatus" />
        </nhs-table-cell>
        <nhs-table-cell>
            @if (Model.NumberOfPrices == 1 && Model.PriceStatus == TaskProgress.NotStarted
            && !(Model.IsAmendment && Model.FromPreviousRevision))
            {
                <a id="Price_@Model.CatalogueItemId" style="float:right;"
                    href="@Url.Action(
                                nameof(PricesController.ConfirmPrice),
                                typeof(PricesController).ControllerName(),
                                new { Model.InternalOrgId, Model.CallOffId, Model.CatalogueItemId, Model.PriceId, source })">Start</a>
            }
            else
            {
                string actionName, actionText;
                if (Model.IsAmendment && Model.FromPreviousRevision)
                {
                    (actionName, actionText) = (nameof(PricesController.ViewPrice), "View");
                }
                else
                {
                    (actionName, actionText) = Model.PriceStatus == TaskProgress.Completed ?
                        (nameof(PricesController.EditPrice), "Change") :
                        (nameof(PricesController.SelectPrice), "Start");
                }
                <a id="Price_@Model.CatalogueItemId" style="float:right;"
                    href="@Url.Action(
                                actionName,
                                typeof(PricesController).ControllerName(),
                                new { Model.InternalOrgId, Model.CallOffId, Model.CatalogueItemId, source })">@actionText</a>
            }
        </nhs-table-cell>
    </nhs-table-row-container>

    <nhs-table-row-container>
        <nhs-table-cell>Quantity</nhs-table-cell>
        <nhs-table-cell>
            <nhs-tag status-enum="@Model.QuantityStatus" />
        </nhs-table-cell>
        <nhs-table-cell>
            @if (Model.QuantityStatus != TaskProgress.CannotStart)
            {
                @if ((Model.IsAmendment && Model.FromPreviousRevision && !Model.HasNewRecipients && Model.QuantityStatus != TaskProgress.InProgress)
                    || (Model.IsAmendment && Model.IsAssociatedService))
                {
                    <a id="Quantity_@Model.CatalogueItemId" style="float:right;"
                        href="@Url.Action(
                                    nameof(QuantityController.ViewOrderItemQuantity),
                                    typeof(QuantityController).ControllerName(),
                                    new { Model.InternalOrgId, Model.CallOffId, Model.CatalogueItemId })">View</a>
                }
                else
                {
                    var action = Model.QuantityStatus switch
                    {
                        TaskProgress.Completed => Model.OrderType.MergerOrSplit ? "View" : "Change",
                        TaskProgress.Amended => "Change",
                        _ => "Start",
                    };

                    <a id="Quantity_@Model.CatalogueItemId" style="float:right;"
                        href="@Url.Action(
                                nameof(QuantityController.SelectQuantity),
                                typeof(QuantityController).ControllerName(),
                                new { Model.InternalOrgId, Model.CallOffId, Model.CatalogueItemId, source })">@action</a>
                }
            }
        </nhs-table-cell>
    </nhs-table-row-container>
</nhs-table>

@if (Model.CanBeRemoved)
{
    <vc:nhs-delete-button url="@Url.Action(nameof(CatalogueSolutionsController.RemoveService),
        typeof(CatalogueSolutionsController).ControllerName(),
        new { Model.InternalOrgId, Model.CallOffId, catalogueItemId = Model.CatalogueItemId })"
        text="Remove @Model.Name" />
    <hr class="nhsuk-section-break nhsuk-section-break--m nhsuk-section-break--visible">
}
