@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Ordering.Models
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Extensions;
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Organisations.Models
@using NHSD.GPIT.BuyingCatalogue.ServiceContracts.Enums;
@using NHSD.GPIT.BuyingCatalogue.UI.Components.TagHelpers
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.InsetText
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.Table
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.Tags
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Controllers.FundingSource
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using ValidationSummaryTagHelper = Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper
@model NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Models.FundingSources.FundingSources
@{
    ViewBag.Title = Model.Title;

    var advice = string.Empty;

    @if (Model.OrderItemsSelectable != null && Model.OrderItemsSelectable.Any())
        advice = Model.Order.IsAmendment
            ? "Provide information on how you'll be paying for the amendments you've made to the previous order."
            : "Provide information on how you’ll be paying for the items you’ve added to this order.";
    else if (Model.OrderItemsSingleFundingType != null && Model.OrderItemsSingleFundingType.Any())
        advice = Model.Order.OrderingParty.OrganisationType == OrganisationType.GP
            ? "As you are buying for a single practice, you can only pay for this order using local funding."
            : $"As you're buying from the {Model.SelectedFramework.ShortName} framework, you can only pay for this order using {Model.SelectedFramework.FundingTypes.First().Description()}.";
    else
        advice = "You do not need to pay for the following solutions or services as they’re available free of charge.";
}

<partial name="Partials/_BackLink" model="Model"/>
<div class="nhsuk-grid-row">
    <div class="nhsuk-grid-column-full">
        <nhs-validation-summary/>
        <nhs-page-title title="@ViewBag.Title"
                        advice="@advice"
                        caption="@Model.Caption"/>

        @if (Model.Order.IsAmendment == false && Model.CountOfOrderFrameworks > 1)
        {
            <nhs-inset-text data-test-id="funding-sources-multiple-frameworks-change">
                <p>
                    These items are available from more than one framework. You’re procuring them from the @(Model.SelectedFramework.ShortName) framework.
                    <a href="@Url.Action(nameof(FundingSourceController.SelectFramework), typeof(FundingSourceController).ControllerName(), new { Model.InternalOrgId, Model.CallOffId })">Change framework</a>
                </p>
            </nhs-inset-text>
        }

        <nhs-card-v2>
            <nhs-card-content>
                @if (Model.OrderItemsSelectable != null && Model.OrderItemsSelectable.Any())
                {
                    <div style="display:block; align-items:center;">
                        <h3 style="text-align:left; display: inline-block; vertical-align:middle">
                            Funding information (costs exclude VAT)
                        </h3>

                        <span class="detail" style="float:right; vertical-align:middle">
                            <strong>@Model.OrderItemsSelectable.Where(x => x.FundingType != OrderItemFundingType.None).Count()</strong> of <strong>@Model.OrderItemsSelectable.Count()</strong> started
                        </span> 
                    </div>
                
                    <nhs-table data-test-id="funding-sources-items-editable">
                        <nhs-table-column>Solution or service</nhs-table-column>
                        <nhs-table-column>Total cost</nhs-table-column>
                        <nhs-table-column>Funding type</nhs-table-column>
                        <nhs-table-column>Status</nhs-table-column>
                        <nhs-table-column><span class="nhsuk-u-visually-hidden">Action</span></nhs-table-column>
                        @foreach (var item in Model.OrderItemsSelectable)
                        {
                            <nhs-table-row-container>
                                <nhs-table-cell>@item.CatalogueItem.Name</nhs-table-cell>
                                <nhs-table-cell>@($"£{CalculateTotalCost(item):N2}")</nhs-table-cell>
                                <nhs-table-cell>@item.FundingType.Description()</nhs-table-cell>
                                <nhs-table-cell>
                                    <nhs-tag status-enum="@GetStatus(item)"></nhs-tag>
                                </nhs-table-cell>
                                <nhs-table-cell>
                                    <a data-test-id="@item.CatalogueItem.Name.Trim().Replace(' ', '-')" asp-controller="@typeof(FundingSourceController).ControllerName()"
                                       asp-action="@nameof(FundingSourceController.FundingSource)"
                                       asp-route-internalOrgId="@Model.InternalOrgId"
                                       asp-route-callOffId="@Model.CallOffId"
                                       asp-route-catalogueItemId="@item.CatalogueItem.Id">
                                        @GetLinkText(item)
                                    </a>
                                </nhs-table-cell>
                            </nhs-table-row-container>
                        }
                        <nhs-table-row-container>
                            <nhs-table-cell>
                                <b>Total</b>
                            </nhs-table-cell>
                            <nhs-table-cell>@($"£{Model.OrderItemsSelectable.Sum(CalculateTotalCost):N2}")</nhs-table-cell>
                            <nhs-table-cell></nhs-table-cell>
                            <nhs-table-cell></nhs-table-cell>
                            <nhs-table-cell></nhs-table-cell>
                        </nhs-table-row-container>
                    </nhs-table>
                }
                @if (Model.OrderItemsSingleFundingType != null && Model.OrderItemsSingleFundingType.Any())
                {
                    <div style="display:block; align-items:center;">
                        <h3 style="text-align:left; display: inline-block; vertical-align:middle">
                            Funding information (costs exclude VAT)
                        </h3>

                        <span class="detail" style="float:right; vertical-align:middle">
                            <strong>@Model.OrderItemsSelectable.Where(x => x.FundingType != OrderItemFundingType.None).Count()</strong> of <strong>@Model.OrderItemsSelectable.Count()</strong> started
                        </span>
                    </div>
                    <nhs-table data-test-id="funding-sources-items-local-only"
                               label-text="Item and cost">
                        <nhs-table-column>Solution or service</nhs-table-column>
                        <nhs-table-column>Total cost</nhs-table-column>
                        <nhs-table-column></nhs-table-column>
                        <nhs-table-column></nhs-table-column>
                        @foreach (var item in Model.OrderItemsSingleFundingType)
                        {
                            <nhs-table-row-container>
                                <nhs-table-cell>@item.CatalogueItem.Name</nhs-table-cell>
                                <nhs-table-cell>@($"£{CalculateTotalCost(item):N2}")</nhs-table-cell>
                                <nhs-table-cell></nhs-table-cell>
                                <nhs-table-cell></nhs-table-cell>
                            </nhs-table-row-container>
                        }
                        <nhs-table-row-container>
                            <nhs-table-cell>
                                <b>Total</b>
                            </nhs-table-cell>
                            <nhs-table-cell>@($"£{Model.OrderItemsSingleFundingType.Sum(CalculateTotalCost):N2}")</nhs-table-cell>
                            <nhs-table-cell></nhs-table-cell>
                            <nhs-table-cell></nhs-table-cell>
                        </nhs-table-row-container>
                    </nhs-table>
                }
                @if (Model.OrderItemsNoFundingRequired != null && Model.OrderItemsNoFundingRequired.Any())
                {
                    @if ((Model.OrderItemsSingleFundingType != null && Model.OrderItemsSingleFundingType.Any())
                   || (Model.OrderItemsSelectable != null && Model.OrderItemsSelectable.Any()))
                    {
                        <br/>
                    }
                    <nhs-table data-test-id="funding-sources-items-no-funding-required"
                               label-text="No funding required">
                        <nhs-table-column>Solution or service</nhs-table-column>
                        <nhs-table-column>Total cost</nhs-table-column>
                        <nhs-table-column></nhs-table-column>
                        <nhs-table-column></nhs-table-column>
                        @foreach (var item in Model.OrderItemsNoFundingRequired)
                        {
                            <nhs-table-row-container>
                                <nhs-table-cell>@item.CatalogueItem.Name</nhs-table-cell>
                                <nhs-table-cell>@($"£{CalculateTotalCost(item):N2}")</nhs-table-cell>
                                <nhs-table-cell></nhs-table-cell>
                                <nhs-table-cell></nhs-table-cell>
                            </nhs-table-row-container>
                        }
                    </nhs-table>
                }
            </nhs-card-content>
        </nhs-card-v2>
        <form method="post">
            <nhs-submit-button text="Continue"/>
        </form>
    </div>
</div>

@{
    TaskProgress GetStatus(OrderItem item) => item.FundingType == OrderItemFundingType.None ? TaskProgress.NotStarted : TaskProgress.Completed;
    string GetLinkText(OrderItem item) => item.FundingType == OrderItemFundingType.None ? "Start" : "Change";

    decimal CalculateTotalCost(OrderItem item) => Model.OrderWrapper.TotalCostForOrderItem(item.CatalogueItem.Id);
}
