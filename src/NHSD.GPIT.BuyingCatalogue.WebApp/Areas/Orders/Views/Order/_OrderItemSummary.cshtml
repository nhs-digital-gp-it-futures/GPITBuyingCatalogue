@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Catalogue.Models
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Extensions
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Interfaces
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Ordering.Models
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.DetailsAndExpander
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.Table
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Models.Orders;
@using NHSD.GPIT.BuyingCatalogue.WebApp.Extensions;
@model AmendOrderItemModel

@{
    var totalCost = ((IPrice)Model.OrderItemPrice).CostForBillingPeriod(Model.RolledUpTotalQuantity);
    var hasServiceRecipientQuantities = ((IPrice)Model.OrderItemPrice)?.IsPerServiceRecipient() ?? false;
    var hasTieredPricing = Model.OrderItemPrice?.CataloguePriceType is CataloguePriceType.Tiered;
}

<nhs-expander colour-mode="BlackAndWhite"
              label-text="@Model.CatalogueItem.Name"
              added-sticker="@Model.IsAmendment && @Model.IsOrderItemAdded"
			  open="true"
			  bold-title="true">
    @if (Model.OrderItemRecipients.Any())
    {
        <br/>
        <nhs-table label-text="Service Recipients" catches-errors="false">
            @if (Model.IsAmendment)
            {
                <nhs-table-column>Status</nhs-table-column>
            }
            <nhs-table-column>Recipient (ODS code)</nhs-table-column>
            <nhs-table-column>Item ID</nhs-table-column>
            <nhs-table-column>Planned delivery date</nhs-table-column>
            <nhs-table-column>Quantity</nhs-table-column>

			@foreach(var serviceRecipient in Model.OrderItemRecipients)
			{
			    var deliveryDate = serviceRecipient.DeliveryDate.HasValue
			        ? $"{serviceRecipient.DeliveryDate.Value:d MMM yyyy}"
			        : "No date entered";

                <nhs-table-row-container>
                    @if (Model.IsAmendment)
                    {
                        <nhs-table-cell style="width: 50px;">
                            @if (Model.IsServiceRecipientAdded(serviceRecipient.OdsCode))
                            {
                                <div class="bc-c-task-list__task-status">
                                    <strong class="nhsuk-tag nhsuk-tag--blue">Added</strong>
                                </div>
                            }
                            else
                            {
                                <span aria-label="Existing"></span>
                            }
                        </nhs-table-cell>
                    }
                    <nhs-table-cell>@serviceRecipient.Recipient.Name (@serviceRecipient.Recipient.OdsCode)</nhs-table-cell>
                    <nhs-table-cell>@($"{Model.CallOffId}-{serviceRecipient.Recipient.OdsCode}-{ViewContext.HttpContext.NextLineId()}")</nhs-table-cell>
                    <nhs-table-cell>@deliveryDate</nhs-table-cell>
                    <nhs-table-cell>
                        @if (hasServiceRecipientQuantities)
                        {
                            @(serviceRecipient.Quantity.HasValue ? $"{serviceRecipient.Quantity:N0}" : "-")
                        }
                        else
                        {
                            @("N/A")
                        }
                    </nhs-table-cell>
                </nhs-table-row-container>
            }
        </nhs-table>
    }

    @if (Model.OrderItemPrice?.OrderItemPriceTiers.Any() ?? false)
    {
        var billingPeriod = Model.OrderItemPrice.BillingPeriod?.Description() ?? "one-off";

        <br />
        <nhs-table label-text="Pricing" catches-errors="false">
            @if (hasTieredPricing)
            {
                <nhs-table-column>Pricing tier</nhs-table-column>
            }
            <nhs-table-column>Price per unit</nhs-table-column>
            @if (Model.IsAmendment) {
                <nhs-table-column>Old quantity</nhs-table-column>
                <nhs-table-column>New quantity</nhs-table-column>
                <nhs-table-column>Old price</nhs-table-column>
                <nhs-table-column>New price</nhs-table-column>
            } else {
                <nhs-table-column>Quantity</nhs-table-column>
                <nhs-table-column>Total cost (@billingPeriod)</nhs-table-column>
            }
            @{
                var rolledUpCosts = ((IPrice)Model.OrderItemPrice).CostPerTierForBillingPeriod(Model.RolledUpTotalQuantity);
                var previousCosts = ((IPrice)Model.OrderItemPrice).CostPerTierForBillingPeriod(Model.PreviousTotalQuantity);
                @for (var i = 0; i < rolledUpCosts.Count; i++)
                {
                    <nhs-table-row-container>
                        @if (hasTieredPricing)
                        {
                            <nhs-table-cell>Tier @rolledUpCosts[i].Id</nhs-table-cell>
                        }
                        <nhs-table-cell>£@rolledUpCosts[i].Price.ToString("N4") @Model.OrderItemPrice.ToPriceUnitString()</nhs-table-cell>

                        @if (Model.IsAmendment) {
                            <nhs-table-cell>@($"{previousCosts[i].Quantity:N0}")</nhs-table-cell>
                            <nhs-table-cell>@($"{rolledUpCosts[i].Quantity:N0}")</nhs-table-cell>
                            <nhs-table-cell>£@previousCosts[i].Cost.ToString("N2")</nhs-table-cell>
                            <nhs-table-cell>£@rolledUpCosts[i].Cost.ToString("N2")</nhs-table-cell>
                        } else {
                            <nhs-table-cell>@($"{rolledUpCosts[i].Quantity:N0}")</nhs-table-cell>
                            <nhs-table-cell>£@rolledUpCosts[i].Cost.ToString("N2")</nhs-table-cell>
                        }
                    </nhs-table-row-container>
                }
            }
        </nhs-table>
    }

    <br />
    <b>@Model.FundingTypeDescription</b>
</nhs-expander>
