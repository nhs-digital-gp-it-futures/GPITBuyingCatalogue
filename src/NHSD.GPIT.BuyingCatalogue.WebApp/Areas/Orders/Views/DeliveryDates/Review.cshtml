@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Ordering.Models
@using NHSD.GPIT.BuyingCatalogue.ServiceContracts.Routing
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Controllers
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Controllers.Contracts
@model NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Models.Contracts.DeliveryDates.ReviewModel
@{
    ViewBag.Title = "Review planned delivery dates";
    var mergerSplit = Model.OrderType.MergerOrSplit && Model.AssociatedServiceIds.Count == 1;

    var caption = mergerSplit
        ? Model.OrderItemName(Model.AssociatedServiceIds[0])
        : $"Order {Model.CallOffId}";

    var advice = mergerSplit
        ? "Make sure the correct planned delivery dates have been applied for each of your Service Recipients."
        : "Make sure the correct dates are applied to the items you're ordering.";
}

<partial name="Partials/_BackLink" model="Model" />

<div class="nhsuk-grid-row">
    <div class="nhsuk-grid-column-full">
        <nhs-validation-summary />

        <nhs-page-title title="@ViewBag.Title"
                        caption="@caption"
                        advice="@advice" />

        @if (Model.OrderType.MergerOrSplit)
        {
            var practiceReorganisationRecipientTitle = Model.OrderType.Value switch
            {
                OrderTypeEnum.AssociatedServiceSplit => "Service Recipient to be split",
                OrderTypeEnum.AssociatedServiceMerger => "Retained Service Recipient",
                _ => throw new InvalidOperationException($"Unsupported orderType {Model.OrderType.Value}"),
            };

            <nhs-summary-list>
                <nhs-summary-list-row label-text="Catalogue Solution">
                    @Model.SolutionName
                </nhs-summary-list-row>
                <nhs-summary-list-row label-text="@practiceReorganisationRecipientTitle">
                    @Model.PracticeReorganisationName
                </nhs-summary-list-row>
            </nhs-summary-list>
        }

        @if (Model.DeliveryDate != null)
        {
            var returnUrl = Url.Action(
            nameof(DeliveryDatesController.Review),
            typeof(DeliveryDatesController).ControllerName(),
            new { Model.InternalOrgId, Model.CallOffId });

            <p>
                <strong>Planned delivery date for the majority of Service Recipients:</strong>
                @GetFormattedDate(Model.DeliveryDate)
                <span>&nbsp;</span>
                <a id="change-delivery-date-link"
                   href="@Url.Action(
                             nameof(DeliveryDatesController.SelectDate),
                             typeof(DeliveryDatesController).ControllerName(),
                             new { Model.InternalOrgId, Model.CallOffId, returnUrl })">Change</a>
            </p>
            <hr />
        }

        @if (Model.SolutionId != null && Model.OrderItemDates(Model.SolutionId.Value).Any())
        {
            var catalogueItemId = Model.SolutionId.Value;
            var itemName = Model.OrderItemName(catalogueItemId);

            <h2>Catalogue Solution</h2>
            
            var url = Url.Action(nameof(DeliveryDatesController.EditDates), typeof(DeliveryDatesController).ControllerName(),
                new { Model.InternalOrgId, Model.CallOffId, catalogueItemId, source = RoutingSource.TaskList });
            

            foreach (var date in Model.OrderItemDates(catalogueItemId))
            {
                <nhs-expander label-text="@itemName"
                              secondary-text-title="Planned delivery date: "
                              secondary-text="@GetFormattedDate(date)"
                              secondary-url-title="Change date"
                              secondary-url="@url"
                              bold-title="true"
                              open="true">
                    <nhs-table>
                        <nhs-table-column>Organisation</nhs-table-column>
                        <nhs-table-column>ODS code</nhs-table-column>
                        @foreach (var (odsCode, name) in Model.OrderItemRecipients(catalogueItemId, date))
                        {
                            <nhs-table-row-container>
                                <nhs-table-cell>@name</nhs-table-cell>
                                <nhs-table-cell>@odsCode</nhs-table-cell>
                            </nhs-table-row-container>
                        }
                    </nhs-table>
                </nhs-expander>
            }
        }

        @if (Model.AdditionalServiceIds.Any())
        {
            <h2>Additional Services</h2>

            @foreach (var catalogueItemId in Model.AdditionalServiceIds.Where(x => Model.OrderItemDates(x).Any()))
            {
                var itemName = Model.OrderItemName(catalogueItemId);

                var url = Url.Action(nameof(DeliveryDatesController.EditDates),
                    typeof(DeliveryDatesController).ControllerName(),
                    new { Model.InternalOrgId, Model.CallOffId, catalogueItemId, source = RoutingSource.TaskList });

                foreach (var date in Model.OrderItemDates(catalogueItemId))
                {
                    <nhs-expander label-text="@itemName"
                                  secondary-text-title="Planned delivery date: "
                                  secondary-text="@GetFormattedDate(date)"
                                  secondary-url-title="Change date"
                                  secondary-url="@url"
                                  bold-title="true"
                                  open="true">
                        <nhs-table>
                            <nhs-table-column>Organisation</nhs-table-column>
                            <nhs-table-column>ODS code</nhs-table-column>
                            @foreach (var (odsCode, name) in Model.OrderItemRecipients(catalogueItemId, date))
                            {
                                <nhs-table-row-container>
                                    <nhs-table-cell>@name</nhs-table-cell>
                                    <nhs-table-cell>@odsCode</nhs-table-cell>
                                </nhs-table-row-container>
                            }
                        </nhs-table>
                    </nhs-expander>
                }
            }
        }

        @if (Model.AssociatedServiceIds.Any())
        {
            if (!mergerSplit)
            {
                <h2>Associated Services</h2>
            }

            @foreach (var catalogueItemId in Model.AssociatedServiceIds)
            {
                var itemName = Model.OrderItemName(catalogueItemId);
                var url = Url.Action(nameof(DeliveryDatesController.EditDates),
                    typeof(DeliveryDatesController).ControllerName(),
                    new { Model.InternalOrgId, Model.CallOffId, catalogueItemId, source = RoutingSource.TaskList });

                foreach (var date in Model.OrderItemDates(catalogueItemId))
                {
                    var label = mergerSplit
                        ? $"Planned delivery date: {GetFormattedDate(date)}"
                        : itemName;

                    var secondaryTitle = string.Empty;
                    var secondaryText = string.Empty;
                    var secondaryUrlTitle = string.Empty;
                    var secondaryUrl = string.Empty;

                    if (!mergerSplit)
                    {
                        secondaryTitle = $"Planned delivery date: ";
                        secondaryText = GetFormattedDate(date);
                        secondaryUrlTitle = $"Change date";
                        secondaryUrl = url;
                    }
                    <nhs-expander label-text="@label"
                                  secondary-text-title="@secondaryTitle"
                                  secondary-text="@secondaryText"
                                  secondary-url-title="@secondaryUrlTitle"
                                  secondary-url="@secondaryUrl"
                                  bold-title="true"
                                  open="true">
                        <nhs-table>
                            <nhs-table-column>Organisation</nhs-table-column>
                            <nhs-table-column>ODS code</nhs-table-column>
                            @foreach (var (odsCode, name) in Model.OrderItemRecipients(catalogueItemId, date))
                            {
                                <nhs-table-row-container>
                                    <nhs-table-cell>@name</nhs-table-cell>
                                    <nhs-table-cell>@odsCode</nhs-table-cell>
                                </nhs-table-row-container>
                            }
                        </nhs-table>
                    </nhs-expander>
                }
            }
        }

        <vc:nhs-secondary-button text="Save and continue"
                                 type="Primary"
                                 url="@Url.Action(
                                          nameof(OrderController.Order),
                                          typeof(OrderController).ControllerName(),
                                          new { Model.InternalOrgId, Model.CallOffId })" />
    </div>
</div>

@{
    string GetFormattedDate(DateTime? date) => date.HasValue
        ? $"{date.Value:d MMMM yyyy}"
        : "No date entered";
}
