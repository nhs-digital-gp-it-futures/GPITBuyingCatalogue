@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Solutions.Controllers
@using NHSD.GPIT.BuyingCatalogue.Framework.Extensions;
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Catalogue.Models;
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Solutions.Models;
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Extensions;
@model NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Solutions.Models.ListPriceModel;
@{
    const string ContextualContent = "This is how much this Catalogue Solution costs:";
}

<article class="nhsuk-grid-row">
    <div class="nhsuk-grid-column-two-thirds">

        <p><strong>@ContextualContent</strong></p>

        @if (Model.TieredListPrices.Any())
        {
            @if (Model.HasFlatListPrices())
            {
                <h4><strong>Tiered prices for this Catalogue Solution</strong></h4>
            }
            @foreach (var price in Model.TieredListPrices)
            {
                <nhs-table label-text="Tiered price @price.PricingUnit.Description" data-test-id="tiered-list-price-table">
                <nhs-table-column>Tier</nhs-table-column>
                <nhs-table-column>Price per unit</nhs-table-column>
                <nhs-table-column>Range</nhs-table-column>
                @for (var i = 0; i < price.CataloguePriceTiers.Count; i++)
                {
                    var priceTier = price.CataloguePriceTiers.OrderBy(p => p.LowerRange).ElementAt(i);
                    <nhs-table-row-container>
                        <nhs-table-cell>
                           @GetTierName(i)
                        </nhs-table-cell>
                        <nhs-table-cell>
                           £@priceTier.Price @price.ProvisioningType.Name().ToLower()
                        </nhs-table-cell>
                        <nhs-table-cell>
                            @priceTier.GetRangeDescription()
                        </nhs-table-cell>
                    </nhs-table-row-container>

                }
                </nhs-table>
                @if (@price.CataloguePriceCalculationType.ToString() == "SingleFixed")
                {<p>@price.CataloguePriceCalculationType.</p>
                    <div>
                        <partial name="PriceDetails/_TieredSingleFixedDetails" />
                    </div>
                }
                @if (@price.CataloguePriceCalculationType.ToString() == "Cumulative")
                {
                    <div>
                        <partial name="PriceDetails/_TieredCumulativeDetails" />
                    </div>
                }
                @if (@price.CataloguePriceCalculationType.ToString() == "Volume")
                {
                    <div>
                        <partial name="PriceDetails/_TieredVolumeDetails" />
                    </div>
                }
                string UnitDefinition = @price.PricingUnit.Definition?.ToString();
                <div>
                    @if (!string.IsNullOrEmpty(@UnitDefinition))
                    {
                        <p><strong>Unit definition for this Catalogue Solution</strong></p>
                        <p>@UnitDefinition</p>
                    }
                </div>
            }
        }

        @if (Model.HasFlatListPrices())
        {
            @if (Model.TieredListPrices.Any())
            {
                <h4><strong>Flat prices for this Catalogue Solution</strong></h4>
            }
                
            @foreach (var item in Model.FlatListPrices)
            {
                <nhs-table label-text="Flat price @item.Unit" data-test-id="flat-list-price-table">
                    <nhs-table-column>Price</nhs-table-column>
                    <nhs-table-column>Unit</nhs-table-column>
                            <nhs-table-row-container>
                                <nhs-table-cell>
                            @item.CurrencyCode@item.Price.Value.ToString("N4")
                                </nhs-table-cell>
                                <nhs-table-cell>
                            @item.Unit
                                </nhs-table-cell>
                            </nhs-table-row-container>  
                </nhs-table>
            }
        }
    </div>
</article>
@{
    static string GetTierName(int index) => $"Tier {index + 1}";
}
