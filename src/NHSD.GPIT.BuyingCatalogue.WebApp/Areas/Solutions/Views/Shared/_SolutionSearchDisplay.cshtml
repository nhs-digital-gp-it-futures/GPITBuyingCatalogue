@using NHSD.GPIT.BuyingCatalogue.ServiceContracts.Models.SolutionsFilterModels
@using NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Solutions.Controllers;
@using NHSD.GPIT.BuyingCatalogue.Framework.Extensions;
@model (NHSD.GPIT.BuyingCatalogue.EntityFramework.Catalogue.Models.CatalogueItem catalogueItem, ICollection<CapabilitiesAndCountModel> selectedCapabilityIds)

@{
    var orderedCapabilities = Model.catalogueItem.CatalogueItemCapabilities.OrderBy(cic => cic.Capability.Name).ToList();
    var index = orderedCapabilities.FindIndex(oc => oc.Capability.Name == "Productivity");
    if (index >= 0)
    {
        var item = orderedCapabilities.First(oc => oc.Capability.Name == "Productivity");
        orderedCapabilities.RemoveAt(index);
        orderedCapabilities.Add(item);
    }
}

<div data-test-id="solutions-card" class="nhsuk-grid-row">
    <div class="nhsuk-grid-columns-full">
        <h2>
            <a asp-area="@typeof(SolutionsController).AreaName()"
               asp-controller="@typeof(SolutionsController).ControllerName()"
               asp-action="@nameof(SolutionsController.Description)"
               asp-route-solutionId="@Model.catalogueItem.Id">
                @Model.catalogueItem.Name
            </a>
        </h2>
        <h3>
            @Model.catalogueItem.Supplier.Name
        </h3>
        <p>
            @Model.catalogueItem.Solution.Summary
        </p>
        @if (Model.catalogueItem.Solution.AdditionalServices.Any())
        {
            <h4>Additional Services relevant to your search</h4>
            <p>
                @for (int i = 0; i < Model.catalogueItem.Solution.AdditionalServices.Count; i++)
                {
                    <a asp-area="@typeof(SolutionsController).AreaName()"
                       asp-controller="@typeof(SolutionsController).ControllerName()"
                       asp-action="@nameof(SolutionsController.AdditionalServices)"
                       asp-fragment="@Model.catalogueItem.Solution.AdditionalServices.ElementAt(i).CatalogueItemId"
                       asp-route-solutionId="@Model.catalogueItem.Id">
                        @Model.catalogueItem.Solution.AdditionalServices.ElementAt(i).CatalogueItem.Name
                   </a>
                    @if (i + 1 != Model.catalogueItem.Solution.AdditionalServices.Count)
                    {
                        @(", ")
                    }
                }
            </p>
        }
        @if (Model.selectedCapabilityIds.Any()){
            <h4>Search information</h4>
            <p>
            @(CapabilitiesNotMet())
            </p>
        }

        <h4>Framework</h4>
        <p>@(string.Join(", ", Model.catalogueItem.Solution.FrameworkSolutions.Select(fs => fs.Framework.ShortName)))</p>
        <nhs-endnote>
            Published on: @Model.catalogueItem.LastPublished?.ToString("d MMMM yyyy")
        </nhs-endnote>
    </div>
</div>
<hr />

@{
    string CapabilitiesNotMet()
    {
        var claimedCapabilities = Model.catalogueItem.CatalogueItemCapabilities.Select(cic => cic.CapabilityId).ToList();

        claimedCapabilities.AddRange(Model.catalogueItem.Solution.AdditionalServices.SelectMany(adit => adit.CatalogueItem.CatalogueItemCapabilities.Select(cic => cic.CapabilityId)));

        claimedCapabilities = claimedCapabilities.Distinct().ToList();

        var excludedIds = Model.selectedCapabilityIds
            .Where(sci => !claimedCapabilities.Contains(sci.CapabilityId))
            .Select(sci => sci.CapabilityName)
            .OrderBy(sci => sci);

        return excludedIds.Any() ? $"Missing from your search criteria: {string.Join(", ", excludedIds)}" : "All of the Capabilities you've selected have been met.";
    }
}
