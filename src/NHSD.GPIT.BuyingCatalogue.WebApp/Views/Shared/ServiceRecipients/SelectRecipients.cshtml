@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Organisations.Models
@using NHSD.GPIT.BuyingCatalogue.WebApp.Models.Shared.ServiceRecipientModels;
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.Components.NhsSecondaryButton
@model NHSD.GPIT.BuyingCatalogue.WebApp.Models.Shared.ServiceRecipientModels.SelectRecipientsModel;

<partial name="Partials/_BackLink" model="Model" />
<script type="text/javascript" src="@Url.Content("~/js/Recipients.min.js")" asp-append-version="true"></script>
<script type="text/javascript" src="@Url.Content("~/js/Modal.min.js")" asp-append-version="true"></script>

<div class="nhsuk-grid-row">
    <div class="nhsuk-grid-column-full">
        <nhs-validation-summary />
        <nhs-page-title model="@Model" />

        @if ((Model.SubLocations?.Any() ?? false) && Model.OrganisationType != OrganisationType.GP)
        {
            if (Model.HasImportedRecipients
                || (Model.PreviouslySelected?.Any() ?? false))
            {
                <nhs-inset-text>
                    @if (Model.HasImportedRecipients)
                    {
                        <p>
                            <span>Your Service Recipients have been imported successfully.</span>

                            If you need to make changes, you can do so manually or re-import them.
                        </p>
                    }

                    @if (Model.PreviouslySelected?.Any() ?? false)
                    {
                        <p id="previously-selected">
                            We're only showing the Service Recipients which were not included in the original order.
                        </p>
                    }
                </nhs-inset-text>
            }

            <hr />

            <vc:nhs-secondary-button url="@Url.PageLink(values: new { selectionMode = SelectionMode.All })"
                                     text="Select all"
                                     type="Secondary" />
            <vc:nhs-secondary-button url="@Url.PageLink(values: new { selectionMode = SelectionMode.None })"
                                     text="Deselect all"
                                     type="Secondary" />

            <vc:nhs-secondary-button url="#"
                                     text="Search for Service Recipients"
                                     type="Secondary"
                                     id="showDialog"/>

        }

        <form method="post">
            <input type="hidden" asp-for="ImportRecipientsLink" />
            @if (Model.SubLocations?.Any() ?? false)
            {
                @if (Model.OrganisationType != OrganisationType.GP)
                {
                    <h3 style="white-space:nowrap">Sublocations for @Model.OrganisationName</h3>
                }

                @foreach (var (location, lIndex) in Model.SubLocations.Select((x, i) => (x, i)))
                {
                    <input type="hidden" asp-for="@Model.SubLocations[lIndex].Name" />
                    <nhs-expander label-text="@location.Name" secondary-text-title="@(location.ServiceRecipients.Count(r => r.Selected)) " secondary-text="recipients selected" bold-title="true" open="@(Model.ShouldExpand || location.ServiceRecipients.Any(x => x.Selected))">

                        <nhs-table>
                            <nhs-table-column>
                                <div class="nhsuk-checkboxes__item">
                                    <input type="checkbox" class="nhsuk-checkboxes__input" name="selectAll@(lIndex)" id="selectAll@(lIndex)" />
                                    <label for="selectAll@(lIndex)" class="nhsuk-label nhsuk-checkboxes__label">
                                        Organisation
                                    </label>
                                </div>
                            </nhs-table-column>
                            <nhs-table-column>ODS code</nhs-table-column>
                            @foreach (var (item, rIndex) in location.ServiceRecipients.Select((x, i) => (x, i)))
                            {
                                <nhs-table-row-container>
                                    <nhs-table-cell>
                                        <nhs-checkbox-container>
                                            <nhs-checkbox asp-for="@Model.SubLocations[lIndex].ServiceRecipients[rIndex].Selected"
                                                          label-text="@item.Name"
                                                          hidden-input="@Model.SubLocations[lIndex].ServiceRecipients[rIndex].Name" />
                                        </nhs-checkbox-container>
                                    </nhs-table-cell>
                                    <nhs-table-cell>
                                        <div class="nhsuk-input--width-10 nhsuk-u-margin-top-2">@item.OdsCode</div>
                                        <input type="hidden" asp-for="@Model.SubLocations[lIndex].ServiceRecipients[rIndex].OdsCode" />
                                    </nhs-table-cell>
                                </nhs-table-row-container>
                            }
                        </nhs-table>
                    </nhs-expander>
                }
                <br />
                <nhs-submit-button />
            }
            else
            {
                <nhs-submit-button text="Continue" />
            }
        </form>
    </div>
</div>

<output></output>

<!-- A modal dialog containing a form -->
<dialog id="ods-search" class="modal__container">
    <form>
        <header class="modal__header">
            <h2 class="nhsuk-heading-m nhsuk-u-margin-bottom-0 nhsuk-u-margin-top-0" id="modal-1-title">
                Search for Service Recipients
            </h2>
            <button value="cancel" formmethod="dialog" class="nhsuk-button nhsuk-button--secondary">Close</button>
        </header>
        <div class="modal__content">
            <p class="nhsuk-body">
                Find and select the Service Recipients you want to include in this order.
            </p>
            <nhs-auto-complete asp-for="SelectedOrganisationId"
                               asp-items="@Model.SubLocations"
                               label-text="Search by ODS code or organisation name"/>
            <p>
                <label>
                    Favorite animal:
                    <select>
                        <option value="default">Choose…</option>
                        <option>Brine shrimp</option>
                        <option>Red panda</option>
                        <option>Spider monkey</option>
                    </select>
                </label>
            </p>
            <div>
                <button value="cancel" formmethod="dialog">Cancel</button>
                <button id="confirmBtn" value="default" class="nhsuk-button">Apply recipients</button>
                <vc:nhs-secondary-button url="#"
                                         text="Apply recipients"
                                         type="Primary"
                                         id="applyRecipientsBtn" />
                <a value="cancel" formmethod="dialog">Cancel</a>
            </div>
        </div>
    </form>
</dialog>

<script>
    const showButton = document.getElementById("showDialog");
    const dialog = document.getElementById("ods-search");
    const outputBox = document.querySelector("output");
    const selectEl = dialog.querySelector("select");
    const confirmBtn = dialog.querySelector("#confirmBtn");
    const applyRecipientsBtn = dialog.querySelector("#applyRecipientsBtn");

    // "Show the dialog" button opens the <dialog> modally
    showButton.addEventListener("click", () => {
        dialog.showModal();
    });

    // "Favorite animal" input sets the value of the submit button
    selectEl.addEventListener("change", (e) => {
        confirmBtn.value = selectEl.value;
        applyRecipientsBtn.value = selectEl.value;
    });

    // "Cancel" button closes the dialog without submitting because of [formmethod="dialog"], triggering a close event.
    dialog.addEventListener("close", (e) => {
        outputBox.value =
            dialog.returnValue === "default"
                ? "No return value."
                : `ReturnValue: ${dialog.returnValue}.`; // Have to check for "default" rather than empty string
    });

    // Prevent the "confirm" button from the default behavior of submitting the form, and close the dialog with the `close()` method, which triggers the "close" event.
    confirmBtn.addEventListener("click", (event) => {
        event.preventDefault(); // We don't want to submit this fake form
        dialog.close(selectEl.value); // Have to send the select box value here.
    });

    // Prevent the "confirm" button from the default behavior of submitting the form, and close the dialog with the `close()` method, which triggers the "close" event.
    applyRecipientsBtn.addEventListener("click", (event) => {
        event.preventDefault(); // We don't want to submit this fake form
        dialog.close(selectEl.value); // Have to send the select box value here.
    });
</script>
