@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Catalogue.Models;
@using NHSD.GPIT.BuyingCatalogue.Framework.Calculations;
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Extensions;
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Interfaces
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Ordering.Models;
@using NHSD.GPIT.BuyingCatalogue.UI.Components.Views.Shared.TagHelpers.SummaryList
@using NHSD.GPIT.BuyingCatalogue.WebApp.Extensions;
@model NHSD.GPIT.BuyingCatalogue.WebApp.Areas.Orders.Models.Orders.AmendOrderItemModel;
@if (Model.IsAmendment && Model.IsOrderItemAdded)
{
    <h3>
        <strong class="nhsuk-tag nhsuk-tag--grey">Added</strong> @Model.CatalogueItem.Name
    </h3>
}
else
{
<h3>@Model.CatalogueItem.Name</h3>
}

@{
    var itemType = Model.CatalogueItem.CatalogueItemType.DisplayName();
    var orderItemCostBasis = Model.OrderItemPrice?.BillingPeriod?.Description() ?? string.Empty;
    var hasServiceRecipientQuantities = ((IPrice)Model.OrderItemPrice)?.IsPerServiceRecipient() ?? false;
    var tierCosts = ((IPrice)Model.OrderItemPrice)?.CostPerTierForBillingPeriod(Model.RolledUpTotalQuantity) ?? new List<PriceCalculationModel>();
    var tiers = Model.OrderItemPrice?.OrderItemPriceTiers?.OrderBy(x => x.LowerRange).ToList() ?? new List<OrderItemPriceTier>();
    var hasTieredPricing = Model.OrderItemPrice?.CataloguePriceType is CataloguePriceType.Tiered;
    }

@if (Model.OrderItemPrice?.OrderItemPriceTiers.Any() ?? false)
{
    var billingPeriod = Model.OrderItemPrice.BillingPeriod?.Description() ?? "one-off";

    <br />
    <h4>Pricing and quantities</h4>
    <table catches-errors="false">
        <thead>
            <tr>
        @if (hasTieredPricing)
        {
            <th>Pricing tier</th>
        }
            <th>Price per unit</th>
        @if (Model.IsAmendment)
        {
            <th>Old quantity</th>
            <th>New quantity</th>
            <th>Old price</th>
            <th>New price</th>
        }
        else
        {
            <th>Quantity</th>
            <th>Total cost</th>
        }
            </tr>
        <thead>
        @{
            var rolledUpCosts = ((IPrice)Model.OrderItemPrice).CostPerTierForBillingPeriod(Model.RolledUpTotalQuantity);
            var previousCosts = ((IPrice)Model.OrderItemPrice).CostPerTierForBillingPeriod(Model.PreviousTotalQuantity);
            @for (var i = 0; i < rolledUpCosts.Count; i++)
            {
                <tr>
                    @if (hasTieredPricing)
                    {
                        <td>Tier @rolledUpCosts[i].Id</td>
                    }
                    <td>£@rolledUpCosts[i].Price.ToString("N4") @Model.OrderItemPrice.ToPriceUnitString()</td>

                    @if (Model.IsAmendment)
                    {
                        <td>@($"{previousCosts[i].Quantity:N0}")</td>
                        <td>@($"{rolledUpCosts[i].Quantity:N0}")</td>
                        <td>£@previousCosts[i].Cost.ToString("N2")</td>
                        <td>£@rolledUpCosts[i].Cost.ToString("N2")</td>
                    }
                    else
                    {
                        <td>@($"{rolledUpCosts[i].Quantity:N0}")</td>
                        <td>£@rolledUpCosts[i].Cost.ToString("N2")</td>
                    }
                </tr>
            }
        }
    </table>
}

<div class="pdf-container">
    <h3>Funding source</h3>
    <p style="padding-top: 8px;">@Model.FundingTypeDescription</p>
</div>
