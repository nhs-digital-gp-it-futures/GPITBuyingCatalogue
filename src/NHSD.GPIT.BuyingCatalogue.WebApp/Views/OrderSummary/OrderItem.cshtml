@using NHSD.GPIT.BuyingCatalogue.Framework.Calculations
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Extensions
@using NHSD.GPIT.BuyingCatalogue.EntityFramework.Ordering.Models
@model NHSD.GPIT.BuyingCatalogue.WebApp.Models.OrderSummaryItemModel

<h3>@Model.OrderItem.CatalogueItem.Name</h3>

@{
    var itemType = Model.OrderItem.CatalogueItem.CatalogueItemType.DisplayName();
    var orderItemCostBasis = Model.OrderItem.OrderItemPrice?.EstimationPeriod?.Description() ?? string.Empty;
    var hasServiceRecipientQuantities = Model.OrderItem.OrderItemRecipients?.Any(x => x.Quantity.HasValue) ?? false;
    var tierCosts = Model.OrderItem.OrderItemPrice?.CalculateTotalCostPerTier(Model.OrderItem.GetQuantity()) ?? new List<PriceCalculationModel>();
    var tiers = Model.OrderItem.OrderItemPrice?.OrderItemPriceTiers?.OrderBy(x => x.LowerRange).ToList() ?? new List<OrderItemPriceTier>();
}

<pdf-summary-list>
    <pdf-summary-list-row label-text="Item ID">
        @Model.OrderItem.CatalogueItemId
    </pdf-summary-list-row>
                        
    @if (Model.OrderItem.Quantity.HasValue)
    {
        <pdf-summary-list-row label-text="Quantity">
            @($"{Model.OrderItem.Quantity:N0}")
        </pdf-summary-list-row>
    }
                        
    <pdf-summary-list-row label-text="Sub-total">
        @($"£{Model.OrderItem.TotalCost():N2} {orderItemCostBasis}")
    </pdf-summary-list-row>
</pdf-summary-list>

<div class="pdf-container">
    <h3>Service Recipients</h3>
    
    <table>
        <thead>
        <tr>
            <th>Recipient</th>
            <th>ODS Code</th>
            <th>Service Instance ID</th>

            @if (hasServiceRecipientQuantities)
            {
                <th class="numeric">Quantity</th>
            }
        </tr>
        </thead>
        
        @if (!(Model.OrderItem.OrderItemRecipients?.Any() ?? false))
        {
            <tr>
                <td style="column-span: all">No Service Recipients have been entered for this @itemType.</td>
            </tr>
        }
        else
        {
            @foreach (var recipient in Model.OrderItem.OrderItemRecipients)
            {
                <tr>
                    <td>@recipient.Recipient.Name</td>
                    <td>@recipient.Recipient.OdsCode</td>
                    <td>@Model.ServiceInstanceId(recipient.OdsCode)</td>

                    @if (hasServiceRecipientQuantities)
                    {
                        <td class="numeric">
                            @(recipient.Quantity.HasValue ? $"{recipient.Quantity:N0}" : "-")
                        </td>
                    }
                </tr>
            }

            @if (hasServiceRecipientQuantities)
            {
                <tr>
                    <td/>
                    <td/>
                    <td/>
                    <td class="numeric total">
                        @($"{Model.OrderItem.OrderItemRecipients.Sum(x => x.Quantity ?? 0):N0}")
                    </td>
                </tr>
            }
        }
    </table>
</div>

<div class="pdf-container">
    <h3>Pricing</h3>
    
    @if (!tiers.Any())
    {
        <p>Price information has not been entered for this @itemType.</p>
    }
    else
    {
        @if (tiers.Count == 1)
        {
            var tier = tiers.First();

            <pdf-summary-list>
                <pdf-summary-list-row label-text="Price per unit">
                    @($"£{tier.Price:#,###,##0.00##}") @tier.OrderItemPrice.ToPriceUnitString()
                </pdf-summary-list-row>
                    
                <pdf-summary-list-row label-text="Quantity">
                    @($"{tierCosts[0].Quantity:N0}")
                </pdf-summary-list-row>
                    
                <pdf-summary-list-row label-text="Total cost @(tier.OrderItemPrice.EstimationPeriod == null ? "(one-off)" : "")">
                    @($"£{tierCosts[0].Cost:N2}") @orderItemCostBasis
                </pdf-summary-list-row>
            </pdf-summary-list>
        }
        else
        {
            <table>
                <thead>
                <tr>
                    <th>Tier</th>
                    <th>Price</th>
                    <th class="numeric">Quantity</th>
                    <th class="numeric">Cost</th>
                </tr>
                </thead>

                @foreach (var (tier, index) in tiers.Select((x, i) => (x, i)))
                {
                    <tr>
                        <td>Tier @(index + 1)</td>
                        <td>@($"£{tier.Price:#,###,##0.00##}") @tier.OrderItemPrice.ToPriceUnitString()</td>
                        <td class="numeric">@($"{tierCosts[index].Quantity:N0}")</td>
                        <td class="numeric">@($"£{tierCosts[index].Cost:N2}")</td>
                    </tr>
                }
                
                <tr>
                    <td/>
                    <td/>
                    <td class="numeric total">
                        @($"{tierCosts.Sum(x => x.Quantity):N0}")
                    </td>
                    <td class="numeric total">
                        @($"£{tierCosts.Sum(x => x.Cost):N2}")
                    </td>
                </tr>
            </table>
        }
    }
</div>

<h3>Funding source</h3>
<p style="padding-top: 8px;">@Model.OrderItem.FundingTypeDescription</p>
