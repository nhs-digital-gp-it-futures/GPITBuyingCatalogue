variables:
  - name: dockerVersion
    value: '19.03.5'
  - name: dotnetVersion
    value: '7.0.203'
  - name: MSBUILDSINGLELOADCONTEXT
    value: '1'
  - name: buildConfiguration
    value: Release
  - group: dev-acr-secrets

trigger:
  branches:
    include:
    - develop
  paths:
    exclude:
    - '**/BuyingCatalogueFunction*'
    - '**/OrganisationImporter*'
    - 'terraform/orgimport'

pr:
- develop
- feature/*

jobs:
- job: version
  displayName: Work out version
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.x'
  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep
  - script: echo semVer $(setVersionStep.semVer)
    name: echovar

- job: dockerBuildAndPush
  displayName: Build and Package
  variables:
    semVer: $[ dependencies.version.outputs['setVersionStep.semVer'] ]
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      latestTag: latest
    ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
      latestTag: latestbuild

  dependsOn: version
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: UseDotNet@2
    displayName: 'Use DotNet $(dotnetVersion)'
    inputs:
      version: $(dotnetVersion)
      includePreviewVersions: false

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet restore'
    inputs:
      command: restore
      projects: |
        NHSD.GPIT.BuyingCatalogue.sln
        NHSD.GPIT.BuyingCatalogue.Database.sln
      feedsToUse: config
      nugetConfigPath: 'NuGet.config'

  - task: NodeTool@0
    displayName: 'Install Node.js'
    inputs:
      versionSpec: '14.x'

  - task: DockerInstaller@0
    inputs:
      dockerVersion: $(dockerVersion)

  - task: Npm@1
    displayName: 'Run npm install'
    inputs:
      command: 'install'
      workingDir: 'src/NHSD.GPIT.BuyingCatalogue.WebApp'

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet build'
    inputs:
      command: build
      projects: |
        NHSD.GPIT.BuyingCatalogue.sln
        NHSD.GPIT.BuyingCatalogue.Database.sln
      arguments: '--no-restore --configuration $(buildConfiguration)'

  - task: gulp@0
    displayName: 'Run gulp min'
    inputs:
      gulpFile: 'src/NHSD.GPIT.BuyingCatalogue.WebApp/gulpfile.js'
      targets: 'min'
      workingDirectory: 'src/NHSD.GPIT.BuyingCatalogue.WebApp'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: test
      projects: '**/*UnitTests.csproj'
      arguments: '--no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- xunit.parallelizeTestCollections=true'
      publishTestResults: false

  - task: CmdLine@2
    displayName: 'Push code coverage statistics'
    inputs:
      script: |
        curl -Os https://uploader.codecov.io/latest/linux/codecov

        chmod +x codecov
        ./codecov -f tests/**/coverage.cobertura.xml -t $(CODECOVTOKEN)

#  - task: DotNetCoreCLI@2
#    displayName: 'Run Integration Tests'
#    inputs:
#      command: test
#      projects: '**/*IntegrationTests.csproj'
#      arguments: '-v n --no-build --configuration $(buildConfiguration) -- xunit.parallelizeTestCollections=true'
#
#  - task: PowerShell@2
#    inputs:
#      targetType: 'inline'
#      script: |
#        $fileExists = Test-Path -Path "tests/NHSD.GPIT.BuyingCatalogue.E2E.PublicBrowseTests/screenshots"
#        Write-Output "##vso[task.setvariable variable=ScreenshotsExists]$fileExists"
#
#  - publish: tests/NHSD.GPIT.BuyingCatalogue.E2E.PublicBrowseTests/screenshots
#    artifact: test-screenshots
#    condition: eq(variables['ScreenshotsExists'], True)

  - task: Docker@2
    displayName: 'Docker: Build and Push'
    condition: succeeded()
    inputs:
      containerRegistry: 'gpitfuturesdevacr'
      repository: 'nhsd/buying-catalogue/nhsdgpitbuyingcataloguewebapp'
      command: 'buildAndPush'
      Dockerfile: 'src/**/NHSD.GPIT.BuyingCatalogue.WebApp/Dockerfile'
      buildContext: './'
      tags: |
        $(semVer)
        $(latestTag)

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $release = "$(semVer)"
        mkdir $(Build.ArtifactStagingDirectory)/code
        $release | Out-File $(Build.ArtifactStagingDirectory)/code/release.txt

  - task: CopyFiles@2
    displayName: Copy DACPAC
    inputs:
      SourceFolder: 'database/NHSD.GPITBuyingCatalogue.Database'
      Contents: '**/*.dacpac'
      TargetFolder: '$(build.artifactStagingDirectory)/dacpacs'
      CleanTargetFolder: false
      OverWrite: true
      flattenFolders: true 

  - publish: $(build.artifactStagingDirectory)/code
    displayName: Publish Code Version
    artifact: code-version

  - publish: $(build.artifactStagingDirectory)/dacpacs
    displayName: Publish DACPAC
    artifact: dacpacs

- job: createBuildArtifact
  displayName: Publish Terraform
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: CopyFiles@2
    displayName: Build Artifact - Terraform
    inputs:
      SourceFolder: 'terraform/webapp'
      Contents: '**'
      TargetFolder: '$(build.artifactStagingDirectory)/terraform/webapp'
      CleanTargetFolder: false
      OverWrite: true

  - publish: $(build.artifactStagingDirectory)/terraform/webapp
    artifact: build-artifact
