variables:
  - name: dockerVersion
    value: '19.03.5'
  - name: dotnetVersion
    value: '7.0.x'
  - name: MSBUILDSINGLELOADCONTEXT
    value: '1'
  - name: buildConfiguration
    value: Release
  - group: dev-acr-secrets

trigger:
  branches:
    include:
    - develop
  paths:
    exclude:
    - '**/BuyingCatalogueFunction*'
    - '**/OrganisationImporter*'
    - 'terraform/orgimport'

pr:
- develop
- feature/*

jobs:
- job: version
  displayName: Work out version
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.x'
  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep
  - script: echo semVer $(setVersionStep.semVer)
    name: echovar

- job: dockerBuildAndPush
  displayName: Run all tests and build & push docker containers to the ACR
  variables:
    dacpacTag: dacpac-$[ dependencies.version.outputs['setVersionStep.semVer'] ]
    semVer: $[ dependencies.version.outputs['setVersionStep.semVer'] ]
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      latestTag: latest
    ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
      latestTag: latestbuild

  dependsOn: version
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: UseDotNet@2
    displayName: 'Use DotNet $(dotnetVersion)'
    inputs:
      version: $(dotnetVersion)
      includePreviewVersions: false

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet restore'
    inputs:
      command: restore
      projects: 'NHSD.GPIT.BuyingCatalogue.sln'
      feedsToUse: config
      nugetConfigPath: 'NuGet.config'
      arguments: '-v n'

  - task: NodeTool@0
    displayName: 'Install Node.js'
    inputs:
      versionSpec: '14.x'

  - task: DockerInstaller@0
    inputs:
      dockerVersion: $(dockerVersion)

  - task: Npm@1
    displayName: 'Run npm install'
    inputs:
      command: 'install'
      workingDir: 'src/NHSD.GPIT.BuyingCatalogue.WebApp'

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet build'
    inputs:
      command: build
      projects: 'NHSD.GPIT.BuyingCatalogue.sln'
      arguments: '--no-restore --configuration $(buildConfiguration)'

  - task: gulp@0
    displayName: 'Run gulp min'
    inputs:
      gulpFile: 'src/NHSD.GPIT.BuyingCatalogue.WebApp/gulpfile.js'
      targets: 'min'
      workingDirectory: 'src/NHSD.GPIT.BuyingCatalogue.WebApp'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: test
      projects: '**/*UnitTests.csproj'
      arguments: '-v n --no-build --configuration $(buildConfiguration) -- xunit.parallelizeTestCollections=true'

  - task: DotNetCoreCLI@2
    displayName: 'Run Integration Tests'
    inputs:
      command: test
      projects: '**/*IntegrationTests.csproj'
      arguments: '-v n --no-build --configuration $(buildConfiguration) -- xunit.parallelizeTestCollections=true'

  - task: Docker@2
    displayName: 'Docker: Build and Push'
    condition: succeeded()
    inputs:
      containerRegistry: 'gpitfuturesdevacr'
      repository: 'nhsd/buying-catalogue/nhsdgpitbuyingcataloguewebapp'
      command: 'buildAndPush'
      Dockerfile: 'src/**/NHSD.GPIT.BuyingCatalogue.WebApp/Dockerfile'
      buildContext: './'
      tags: |
        $(semVer)
        $(latestTag)

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $release = "$(semVer)"
        mkdir $(Build.ArtifactStagingDirectory)/code
        $release | Out-File $(Build.ArtifactStagingDirectory)/code/release.txt

  - publish: $(build.artifactStagingDirectory)/code
    artifact: code-version

- job: buildDatabaseDacpacs
  displayName: Build all Dacpacs and push
  variables:
    semVer: $[ dependencies.version.outputs['setVersionStep.semVer'] ]
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      latestTag: latest
    ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
      latestTag: latestbuild

  dependsOn: dockerBuildAndPush
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Docker@2
    displayName: 'Docker: Build Dacpacs'
    condition: succeeded()
    inputs:
      containerRegistry: 'gpitfuturesdevacr'
      repository: 'nhsd/buying-catalogue/nhsdgpitbuyingcataloguewebapp'
      command: 'build'
      Dockerfile: 'database/**/NHSD.GPITBuyingCatalogue.Database.Deployment/Docker/Dockerfile.Pipeline'
      buildContext: './'
      tags: |
        $(semVer)
        $(latestTag)

  - pwsh: |
      $id=docker images --filter "label=dacpac=true" -q | Select-Object -First 1
      docker create --name dacpaccontainer $id      
      mkdir $(Build.ArtifactStagingDirectory)/dacpacs
      docker cp dacpaccontainer:/deploy-db/. $(Build.ArtifactStagingDirectory)/dacpacs
      docker rm dacpaccontainer
    displayName: 'Copy DACPACs'

  - publish: $(build.artifactStagingDirectory)/dacpacs
    artifact: dacpacs

- job: createBuildArtifact
  displayName: Publish Terraform
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: CopyFiles@2
    displayName: Build Artifact - Terraform
    inputs:
      SourceFolder: 'terraform/webapp'
      Contents: '**'
      TargetFolder: '$(build.artifactStagingDirectory)/terraform/webapp'
      CleanTargetFolder: false
      OverWrite: true

  - publish: $(build.artifactStagingDirectory)/terraform/webapp
    artifact: build-artifact
