variables:
  - name: dockerVersion
    value: '19.03.5'
  - name: dotnetVersion
    value: '8.0.300'
  - name: MSBUILDSINGLELOADCONTEXT
    value: '1'
  - name: buildConfiguration
    value: Release
  - group: dev-acr-secrets

trigger:
  branches:
    include:
      - develop
  paths:
    exclude:
      - '**/BuyingCatalogueFunction*'
      - '**/OrganisationImporter*'
      - 'terraform/orgimport'

pr:
  - develop
  - feature/*

jobs:
  - job: version
    displayName: Work out version
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: gitversion/setup@0
        displayName: Setup GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Execute GitVersion
        name: version

      - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(version.SemVer)"
        name: setVersionStep

      - script: echo semVer $(setVersionStep.semVer)
        name: echovar

  - job: dockerBuildAndPush
    displayName: Build and Package
    variables:
      semVer: $[ dependencies.version.outputs['setVersionStep.semVer'] ]
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        latestTag: latest
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        latestTag: latestbuild

    dependsOn: version
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: UseDotNet@2
        displayName: 'Use DotNet $(dotnetVersion)'
        inputs:
          version: $(dotnetVersion)
          includePreviewVersions: false

      - task: DotNetCoreCLI@2
        displayName: 'Run dotnet restore'
        inputs:
          command: restore
          projects: |
            NHSD.GPIT.BuyingCatalogue.sln
            NHSD.GPIT.BuyingCatalogue.Database.sln
          feedsToUse: config
          nugetConfigPath: 'NuGet.config'

      - task: NodeTool@0
        displayName: 'Install Node.js'
        inputs:
          versionSpec: '14.x'

      - task: DockerInstaller@0
        inputs:
          dockerVersion: $(dockerVersion)

      - task: Npm@1
        displayName: 'Run npm install'
        inputs:
          command: 'install'
          workingDir: 'src/NHSD.GPIT.BuyingCatalogue.WebApp'

      - task: SonarCloudPrepare@2
        inputs:
          SonarCloud: 'SonarCloud'
          organization: '$(SonarOrganization)'
          scannerMode: 'MSBuild'
          projectKey: '$(SonarKey)'
          projectName: '$(SonarProject)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/tests/**/coverage.opencover.xml
            sonar.exclusions=src/NHSD.GPIT.BuyingCatalogue.UI.Components/**,src/NHSD.GPIT.BuyingCatalogue.UI.Components.WebApp/**,**/*.cshtml,**/*.ts,tests/**

      - task: DotNetCoreCLI@2
        displayName: 'Run dotnet build'
        inputs:
          command: build
          projects: |
            NHSD.GPIT.BuyingCatalogue.sln
            NHSD.GPIT.BuyingCatalogue.Database.sln
          arguments: '--no-restore --configuration $(buildConfiguration)'

      - task: gulp@0
        displayName: 'Run gulp min'
        inputs:
          gulpFile: 'src/NHSD.GPIT.BuyingCatalogue.WebApp/gulpfile.js'
          targets: 'min'
          workingDirectory: 'src/NHSD.GPIT.BuyingCatalogue.WebApp'

      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: test
          projects: '**/*UnitTests.csproj'
          arguments: '--no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage;Format=opencover" -- xunit.parallelizeTestCollections=true'
          publishTestResults: false

      - task: SonarCloudAnalyze@2
      - task: SonarCloudPublish@2

      - task: Docker@2
        displayName: 'Docker: Build and Push'
        condition: succeeded()
        inputs:
          containerRegistry: 'gpitfuturesdevacr'
          repository: 'nhsd/buying-catalogue/nhsdgpitbuyingcataloguewebapp'
          command: 'buildAndPush'
          Dockerfile: 'src/**/NHSD.GPIT.BuyingCatalogue.WebApp/Dockerfile'
          buildContext: './'
          tags: |
            $(semVer)
            $(latestTag)

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $release = "$(semVer)"
            mkdir $(Build.ArtifactStagingDirectory)/code
            $release | Out-File $(Build.ArtifactStagingDirectory)/code/release.txt

      - task: CopyFiles@2
        displayName: Copy DACPAC
        inputs:
          SourceFolder: 'database/NHSD.GPITBuyingCatalogue.Database'
          Contents: '**/*.dacpac'
          TargetFolder: '$(build.artifactStagingDirectory)/dacpacs'
          CleanTargetFolder: false
          OverWrite: true
          flattenFolders: true

      - publish: $(build.artifactStagingDirectory)/code
        displayName: Publish Code Version
        artifact: code-version

      - publish: $(build.artifactStagingDirectory)/dacpacs
        displayName: Publish DACPAC
        artifact: dacpacs

  - job: createBuildArtifact
    displayName: Publish Terraform
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - publish: terraform/webapp
        displayName: Publish Terraform - WebApp
        artifact: build-artifact

      - publish: terraform/core
        displayName: Publish Terraform - Core
        artifact: core-terraform
