variables:
  - name: dockerVersion
    value: '19.03.5'
  - name: dotnetVersion
    value: '5.0.x'
  - name: MSBUILDSINGLELOADCONTEXT
    value: '1'
  - group: dev-acr-secrets

trigger:
- main

pr:
- main

jobs:
- job: version
  displayName: Work out version
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.x'
  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep
  - script: echo semVer $(setVersionStep.semVer)
    name: echovar

- job: dockerBuildAndPush
  displayName: Run all tests and build & push docker containers to the ACR
  variables:
    semVer: $[ dependencies.version.outputs['setVersionStep.semVer'] ]   
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}: 
      latestTag: latest
    ${{ if ne(variables['Build.SourceBranchName'], 'main') }}: 
      latestTag: latestbuild

  dependsOn: version
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: UseDotNet@2
    displayName: 'Use DotNet $(dotnetVersion)'
    inputs:
      version: $(dotnetVersion)
      includePreviewVersions: false
  
  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet restore'
    inputs:
      command: restore
      projects: '**/*Tests.csproj'
      feedsToUse: config
      nugetConfigPath: 'NuGet.config'
      arguments: '-v n'

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet build'
    inputs:
      command: build
      projects: '**/*Tests.csproj'
      arguments: '--no-restore'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: test
      projects: '**/*UnitTests.csproj'
      arguments: '-v n --no-build --collect "Code coverage"'

  - task: DockerInstaller@0
    inputs:
      dockerVersion: $(dockerVersion)
    
  # - script: docker-compose up --build -d
  #   displayName: 'Docker up'

  - task: DotNetCoreCLI@2
    displayName: 'Run integration tests'
    inputs:
      command: test
      projects: '**/*IntegrationTests.csproj'
      arguments: '-v n --no-build'

  - task: DotNetCoreCLI@2
    displayName: 'Run E2E Tests'
    inputs:
      command: test
      projects: '**/*E2ETests.csproj'
      arguments: '-v n --no-build'
  
  - script: docker-compose logs
    displayName: 'Docker logs'
    condition: failed()

  - script: docker-compose down -v
    displayName: 'Docker down'

  - task: Docker@2
    displayName: 'Docker: Build and Push'
    condition: succeeded()
    inputs:
      containerRegistry: 'gpitfuturesdevacr'
      repository: 'nhsd/buying-catalogue/nhsdgpitbuyingcataloguewebapp'
      command: 'buildAndPush'
      Dockerfile: 'src/**/NHSD.GPIT.BuyingCatalogue.WebApp/Dockerfile'
      buildContext: './'
      tags: |
        $(semVer)
        $(latestTag)
- job: createBuildArtifact
  displayName: Create Build Artifact
  dependsOn: dockerBuildAndPush
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
        
  steps:
  - task: CopyFiles@2
    displayName: Build Artifact - Code
    inputs:
      SourceFolder: 'terraform'
      Contents: '**'
      TargetFolder: '$(build.artifactStagingDirectory)/terraform'
      CleanTargetFolder: false
      OverWrite: true

  - publish: $(build.artifactStagingDirectory)
    artifact: build-artifact 
